#!/usr/bin/env python

from __future__ import print_function

import collections
import multiprocessing
import os.path as osp
import time
import warnings
warnings.filterwarnings('ignore')  # NOQA

from paramiko import AutoAddPolicy
from paramiko import SSHClient
from termcolor import colored
import yaml


def cuda_smi(host, user, port, private_key):
    ssh = SSHClient()
    ssh.set_missing_host_key_policy(AutoAddPolicy())
    n_retry = 3
    for i in range(n_retry):
        try:
            ssh.connect(host, port, user, key_filename=private_key)
            break
        except Exception:
            pass
    else:
        return
    stdin, stdout, stderr = ssh.exec_command('$HOME/.local/bin/cuda-smi')
    output = stdout.read()
    ssh.close()
    return output


def main():
    filename = osp.expanduser('~/.gpu_checker.cfg')

    with open(filename, 'r') as f:
        server_list = yaml.load(f)

    port = 22
    private_key = osp.expanduser('~/.ssh/id_rsa')
    user = server_list['username']
    hosts = server_list['hosts']

    pool = multiprocessing.Pool()
    processes = []
    for host in hosts:
        process = pool.apply_async(cuda_smi, args=(host, user, port, private_key))
        processes.append((host, process))

    processes = collections.deque(processes)
    print('-' * 110)
    host_str_size = max(len(host) for host, _ in processes)
    while processes:
        host, process = processes.popleft()
        if process.ready():
            result = process.get()
            template_host = '{:<%ds}' % host_str_size
            host = template_host.format(host)
            host = colored(host, attrs=['bold'])
            if result:
                for line in result.splitlines():
                    print('{}: {}'.format(host, line))
            else:
                print('{}: Cannot connect.'.format(host))
            print('-' * 110)
        else:
            processes.append((host, process))
        time.sleep(0.01)


if __name__ == '__main__':
    main()
