#!/usr/bin/env python

import multiprocessing
import os.path as osp
import warnings
warnings.filterwarnings('ignore')  # NOQA

from paramiko import AutoAddPolicy
from paramiko import SSHClient
import yaml


def exec_ssh_command(*args, **kwargs):
    p = multiprocessing.Process(
        target=cuda_smi,
        args=args,
        kwargs=kwargs)
    p.start()


def cuda_smi(host, user, port, private_key):
    ssh = SSHClient()
    ssh.set_missing_host_key_policy(AutoAddPolicy())
    for i in range(3):
        try:
            ssh.connect(host, port, user, key_filename=private_key)
            break
        except:
            pass
    else:
        print('Cannot connect to: %s' % host)
        return
    stdin, stdout, stderr = ssh.exec_command('$HOME/.local/bin/cuda-smi')
    for line in stdout:
        print("{}: ".format(host) + line.strip('\n'))
    ssh.close()


def main():
    filename = osp.expanduser('~/.gpu_checker.cfg')

    with open(filename, 'r') as f:
        PORT = 22
        PRIVATE_KEY = osp.expanduser('~/.ssh/id_rsa')
        # q = multiprocessing.Queue()
        try:
            server_list = yaml.load(f)
            user = server_list['username']
            for host in server_list['hosts']:
                exec_ssh_command(host, user, PORT, PRIVATE_KEY)
        except yaml.YAMLError as e:
            print(e)


if __name__ == '__main__':
    main()
