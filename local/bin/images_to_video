#!/usr/bin/env python

import argparse
import glob
import platform
import re

import cv2
import tqdm


class CvVideoWriter(object):

    def __init__(self, out, fps):
        if platform.uname()[0] == 'Darwin':
            self.fourcc = cv2.cv.CV_FOURCC(*'mp4v')
            self.out = out + '.mp4'
        else:
            self.fourcc = cv2.cv.CV_FOURCC(*'XVID')
            self.out = out + '.avi'
        self.fps = fps
        self._writer = None

    def write(self, stamp, frame):
        if self._writer is None:
            self._writer = cv2.VideoWriter(
                self.out, self.fourcc, self.fps,
                frameSize=(frame.shape[1], frame.shape[0]),
                isColor=frame.ndim == 3)
        self._writer.write(frame)

    def __del__(self):
        self._writer.release()


def natural_sort(l):
    convert = lambda text: int(text) if text.isdigit() else text.lower()  # NOQA
    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)]  # NOQA
    return sorted(l, key=alphanum_key)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('out_file')
    parser.add_argument('-i', '--input-files', default='*.jpg',
                        help="Input patterns like '*.jpg'")
    parser.add_argument('-r', '--rate', type=int, default=1)
    args = parser.parse_args()

    out_file = args.out_file
    input_files = args.input_files
    rate = args.rate

    input_files = glob.glob(input_files)

    if rate < 30:
        fps = ((30 // rate) + 1) * rate
    else:
        fps = rate
    writer = CvVideoWriter(out_file, fps=fps)

    for f in tqdm.tqdm(input_files, ncols=80):
        frame = cv2.imread(f)
        for _ in xrange(fps // rate):
            writer.write(None, frame)

    print('==> Saved video to: %s' % writer.out)


if __name__ == '__main__':
    main()
