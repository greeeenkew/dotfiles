#!/usr/bin/env python

from __future__ import print_function

import argparse
from distutils.spawn import find_executable
import random
import re
import shlex
import subprocess
import sys
import time


def expression_to_duration(expr):
    if expr.endswith('h'):
        expr = int(expr[:-1]) * 60 * 60
    elif expr.endswith('m'):
        expr = int(expr[:-1]) * 60
    elif expr.endswith('s'):
        expr = int(expr[:-1])
    else:
        try:
            expr = int(expr)
        except ValueError:
            print('Unable to convert expression {0} to duration'.format(expr))
            return
    return expr


def parse_pr_url(url):
    m = re.match('^https?://github.com/(.*)/(.*)/pull/([0-9]*)', url)
    if m is None:
        print('ERROR: Unexpected GitHub PR url {0}'.format(url))
        return
    owner, repo, pr_num = m.groups()
    return owner, repo, pr_num


def main():
    if not find_executable('ghi'):
        print("Please install 'ghi' by 'gem install ghi'", file=sys.stderr)
        sys.exit(1)

    parser = argparse.ArgumentParser()
    parser.add_argument('url', nargs='+')
    parser.add_argument('-s', '--sleep', default='0s',
            help='Sleep duration. default is 0s.')
    args = parser.parse_args()

    urls = args.url
    sleep = args.sleep

    # parse PR url first
    prs = filter(None, [parse_pr_url(url) for url in urls])
    if not prs:
        print('No PRs to comment on.', file=sys.stderr)
        sys.exit(1)

    # convert expression to duration with seconds
    duration = expression_to_duration(sleep)
    if duration is None:
        sys.exit(1)
    print('Sleeping for {0} seconds ({1}).'.format(duration, sleep))
    time.sleep(duration)

    for owner, repo, pr_num in prs:
        # check if open/closed
        cmd = 'ghi --no-pager show {pr_num} -- {owner}/{repo}'\
            .format(owner=owner, repo=repo, pr_num=pr_num)
        line = subprocess.check_output(shlex.split(cmd)).splitlines()[1]
        if '[closed]' in line:
            print('The PR is already closed: {0}'.format(url), file=sys.stderr)
            continue

        img_urls = [
            'https://camo.githubusercontent.com/9fc45525610e240a047efddac55044194e8f3c18/68747470733a2f2f6d65646961322e67697068792e636f6d2f6d656469612f36666a6c454142446e363079412f67697068792e676966',
            'http://m.memegen.com/ac03my.jpg',
            'http://i.giphy.com/LqNjfI9ZXLLmo.gif',
            'http://i.giphy.com/MGdfeiKtEiEPS.gif',
            'http://i.giphy.com/1Cdu8r25fJi3m.gif',
            'http://i.giphy.com/PK5CQPd6rCF3y.gif',
        ]
        img_url = img_urls[random.randint(0, len(img_urls)-1)]

        # comment "please merge this"
        comment = '''\
Could you please merge this?
<img src="{url}" width="300px" />'''.format(url=img_url)
        cmd = "ghi comment {pr_num} -m '{comment}' -- {owner}/{repo}"\
            .format(owner=owner, repo=repo, pr_num=pr_num, comment=comment)
        subprocess.call(shlex.split(cmd))


if __name__ == '__main__':
    main()
