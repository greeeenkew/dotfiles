#!/usr/bin/env python

from __future__ import division

import argparse
import math
import tempfile
import os.path as osp

import cv2
import imageio
import tqdm


def speed_up_video_with_mencoder(video_file, times, out_file):
    reader = imageio.get_reader(video_file)
    meta_data  = reader.get_meta_data()
    fps = meta_data['fps']
    size = meta_data['size']

    for macro_block_size in range(16, 7, -1):
        if size[0] % macro_block_size == 0 and \
                size[1] % macro_block_size == 0:
            break

    writer = imageio.get_writer(out_file, fps=fps * times,
                                macro_block_size=macro_block_size)
    for frame in tqdm.tqdm(reader):
        writer.append_data(frame)

    reader.close()
    writer.close()


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('in_file', help='input filename')
    parser.add_argument('out_file', help='output filename')
    parser.add_argument('--fps', type=int, help='fps of output file')
    parser.add_argument('--size', type=int,
                        help='max size of height x width')
    parser.add_argument('--speed', type=float,
                        default=1, help='speed up')
    args = parser.parse_args()

    if args.speed != 1:
        in_file = tempfile.mktemp() + osp.splitext(args.in_file)[-1]
        speed_up_video_with_mencoder(args.in_file, args.speed, in_file)
    else:
        in_file = args.in_file

    video_in = imageio.get_reader(in_file)
    src_fps = video_in.get_meta_data()['fps']
    dst_fps = args.fps or src_fps
    video_out = imageio.get_writer(args.out_file, fps=dst_fps)

    assert dst_fps <= src_fps
    scale = dst_fps / src_fps

    j = -1
    for i, img in tqdm.tqdm(enumerate(video_in)):
        if int(round((i * scale))) != j:
            if args.size is not None:
                scale = math.sqrt(args.size / (img.shape[0] * img.shape[1]))
                img = cv2.resize(img, None, None, fx=scale, fy=scale)
            video_out.append_data(img)
            j += 1

    print('Saved file: %s' % args.out_file)


if __name__ == '__main__':
    main()
