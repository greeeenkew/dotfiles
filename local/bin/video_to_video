#!/usr/bin/env python

from __future__ import division

import argparse
import math
import os.path as osp
import shutil
import tempfile

import cv2
import imageio
import tqdm


def speed_up_video_with_mencoder(video_file, times, out_file):
    reader = imageio.get_reader(video_file)
    meta_data = reader.get_meta_data()
    fps = meta_data['fps']
    size = meta_data['size']

    for macro_block_size in range(16, 7, -1):
        if size[0] % macro_block_size == 0 and \
                size[1] % macro_block_size == 0:
            break

    writer = imageio.get_writer(
        out_file,
        fps=fps * times,
        macro_block_size=macro_block_size,
    )
    for frame in tqdm.tqdm(reader):
        writer.append_data(frame)

    reader.close()
    writer.close()


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('in_file', help='input filename')
    parser.add_argument('out_file', help='output filename')
    parser.add_argument('--fps', type=int, help='fps of output file')
    parser.add_argument('--size', type=int,
                        help='max size of height x width')
    parser.add_argument('--speed', type=float,
                        default=1, help='speed up')
    args = parser.parse_args()

    tmp_dir = tempfile.mkdtemp()

    ext_in = osp.splitext(args.in_file)[1]
    ext_out = osp.splitext(args.out_file)[1]

    if args.speed == 1:
        speededup_file = args.in_file
    else:
        speededup_file = osp.join(tmp_dir, 'speededup' + ext_in)
        speed_up_video_with_mencoder(args.in_file, args.speed, speededup_file)

    reader = imageio.get_reader(speededup_file)

    src_fps = reader.get_meta_data()['fps']
    dst_fps = args.fps or src_fps

    out_file = osp.join(tmp_dir, 'output' + ext_out)
    writer = imageio.get_writer(out_file, fps=dst_fps)

    assert dst_fps <= src_fps
    scale = dst_fps / src_fps

    j = -1
    for i, img in tqdm.tqdm(enumerate(reader), total=len(reader)):
        if int(round((i * scale))) != j:
            if args.size is not None:
                scale = math.sqrt(args.size / (img.shape[0] * img.shape[1]))
                img = cv2.resize(img, None, None, fx=scale, fy=scale)
            writer.append_data(img)
            j += 1

    shutil.move(out_file, args.out_file)
    shutil.rmtree(tmp_dir)

    print('Saved to: {}'.format(args.out_file))


if __name__ == '__main__':
    main()
