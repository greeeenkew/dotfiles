#!/usr/bin/env python

from __future__ import print_function

import argparse
import os
import os.path as osp
import time

import pandas as pd


def print_bar(title=''):
    if title:
        title = ' ' + title + ' '
    print('=' * 39 + title + '=' * (40 - len(title)))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('log_file')
    parser.add_argument('--all', action='store_true')
    args = parser.parse_args()

    log_file = args.log_file
    show_all = args.all

    pd.set_option('display.float_format', lambda x: '%.3f' % x)

    while True:
        try:
            ext = osp.splitext(log_file)[-1]
            if ext == '.json':
                df = pd.read_json(log_file)
            elif ext == '.csv':
                df = pd.read_csv(log_file)
            df = df.set_index(['epoch', 'iteration'])

            train_cols, val_cols = [], []
            for col in df.columns:
                if col.startswith('validation/'):
                    val_cols.append(col)
                else:
                    train_cols.append(col)

            if show_all:
                print(df.to_string())
                break

            print(chr(27) + "[2J")

            print_bar('train')
            print(df[train_cols].tail(n=10))
            print()

            print_bar('val')
            print(df[val_cols].dropna().tail(n=5))
            print()

            print_bar('min/max')
            print(pd.DataFrame([df.min(), df.max()], index=['min', 'max']))
            print_bar()

            time.sleep(1)
        except KeyboardInterrupt:
            break
        except:
            pass


if __name__ == '__main__':
    main()
