#!/usr/bin/env python

import argparse

import imageio
import imgviz
import path
import numpy as np
import tqdm


parser = argparse.ArgumentParser(
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument('video_files', nargs='+', help='video files')
parser.add_argument('-O', '--out', required=True, help='out file')
parser.add_argument('--resize', type=float, default=1, help='resize')
parser.add_argument('--shape', help='NxM')
args = parser.parse_args()

if args.shape is not None:
    args.shape = [int(x) for x in args.shape.split('x')]

readers = []
for video_file in sorted(args.video_files):
    video_file = path.Path(video_file)
    readers.append((
        video_file.basename().stem,
        imageio.get_reader(video_file),
    ))

writer = imageio.get_writer(args.out, fps=readers[0][1].get_meta_data()['fps'])
i = 0
images_blank = None
pbar = tqdm.tqdm()
while True:
    images = []
    finished = []
    for j, (name, reader) in enumerate(readers):
        finished = []
        try:
            img = reader.get_data(i)
            img = imgviz.draw.text_in_rectangle(
                img, loc='lt', text=name, size=30, background=(255, 255, 255)
            )
            if args.resize != 1:
                height = int(round(img.shape[0] * args.resize))
                img = imgviz.resize(img, height=height)
            finished.append(False)
        except IndexError:
            img = images_blank[j]
            finished.append(True)
        images.append(img)
    if all(finished):
        break
    if images_blank is None:
        images_blank = [np.zeros_like(img) for img in images]
    img = imgviz.tile(images, shape=args.shape, border=(255, 255, 255))
    i += 1
    writer.append_data(img)
    pbar.update()
pbar.close()

print('==> Saved tiled video to: {}'.format(args.out))
