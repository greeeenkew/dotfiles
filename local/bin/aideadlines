#!/usr/bin/env python

import datetime
import glob
import os
import os.path as osp
import urllib2

import dateutil.parser
import pytz
import tabulate
import yaml


def get_conferences_data():
    cache_dir = osp.expanduser('~/.cache/aideadlines')
    if not osp.exists(cache_dir):
        os.makedirs(cache_dir)

    now = datetime.datetime.now(pytz.timezone('GMT'))
    cache_file = osp.join(cache_dir, now.strftime('%Y-%m-%d.yaml'))

    if osp.exists(cache_file):
        data = yaml.load(open(cache_file))
    else:
        for f in glob.glob(osp.join(cache_dir, '*.yaml')):
            os.remove(f)
        url = 'https://raw.githubusercontent.com/abhshkdz/ai-deadlines/gh-pages/_data/conferences.yml'  # NOQA
        response = urllib2.urlopen(url)
        data = yaml.load(response.read())
        with open(cache_file, 'w') as f:
            yaml.safe_dump(data, f, default_flow_style=False)

    for conf in data:
        timezone = conf.get('timezone', 'America/New_York')
        delta = datetime.timedelta(hours=0)
        if timezone == 'PST':
            timezone = 'US/Pacific'
        if timezone == 'AoE':
            timezone = 'Etc/GMT+12'
        if timezone != 'UTC' and timezone[:3] == 'UTC':
            delta = datetime.timedelta(hours=int(timezone[3:]))
            timezone = 'UTC'
        deadline = dateutil.parser.parse(conf['deadline'])
        deadline = deadline.replace(tzinfo=pytz.timezone(timezone))
        deadline += delta
        deadline = deadline.astimezone(pytz.timezone('GMT'))
        conf['deadline'] = deadline
        conf['remain'] = deadline - now
        yield conf


def main():
    now = datetime.datetime.now(pytz.timezone('GMT'))
    headers = ['title', 'year', 'deadline', 'remain', 'sub']
    rows = []
    for conf in sorted(get_conferences_data(), key=lambda x: x['deadline']):
        if conf['deadline'] < now:
            continue
        rows.append([conf[h] for h in headers])
    table = tabulate.tabulate(rows, headers=headers, stralign='right')
    print(table)


if __name__ == '__main__':
    main()
