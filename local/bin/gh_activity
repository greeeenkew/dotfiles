#!/usr/bin/env python

from __future__ import print_function

import argparse
from collections import OrderedDict
import datetime as dt
import itertools
import os
import sys

from github import Github
import pytz
import tabulate
import yaml


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('date', nargs='?', help='default: today')
    args = parser.parse_args()

    date = args.date

    today = dt.date.today()
    if date is None:
        now = dt.datetime.now(pytz.timezone('Asia/Tokyo'))
    else:
        try:
            now = dt.datetime.strptime(date, '%Y-%m-%d')
        except ValueError:
            try:
                now = dt.datetime.strptime(date, '%Y%m%d')
            except ValueError:
                try:
                    date = int(date)
                    now = dt.datetime(today.year, today.month, today.day)
                    now += dt.timedelta(days=date)
                except ValueError:
                    print('Failed to parse the date argument: %s' % date)
                    return
        now = now.replace(tzinfo=pytz.timezone('Asia/Tokyo'))

    gh = Github(os.environ['GITHUB_TOKEN'])
    user = gh.get_user('wkentaro')

    msg = 'Getting GitHub activities on %s...' % now.strftime('%Y-%m-%d')
    spinner = itertools.cycle(list('|/-\\'))

    rows = []
    for i, event in enumerate(user.get_events()):
        sys.stdout.write(msg + ' ' + next(spinner))
        sys.stdout.flush()
        sys.stdout.write('\r')

        # UTC -> Asia/Tokyo
        created_at = event.created_at.replace(tzinfo=pytz.timezone('UTC'))
        created_at = created_at.astimezone(pytz.timezone('Asia/Tokyo'))

        if created_at < now - dt.timedelta(days=1):
            continue

        cols = []
        cols.append(created_at.strftime('%Y-%m-%dT%H:%M:%S'))
        cols.append(event.repo.name)
        cols.append(event.type)

        payload = event.payload
        if event.type == 'IssueCommentEvent':
            event = 'issue title: {}'.format(payload['issue']['title'])
        elif event.type == 'PushEvent':
            n_commit = len(payload['commits'])
            if n_commit > 0:
                repr_commit = payload['commits'][0]['message'].splitlines()[0][:40]
            event = 'commits: {} commits "{}"'.format(n_commit, repr_commit)
        elif event.type == 'PullRequestReviewCommentEvent':
            event = 'comment: {}'.format(payload['comment']['body'].splitlines()[0][:40])
        elif event.type == 'WatchEvent':
            event = 'action: {}'.format(payload['action'].replace('started', 'starred'))
        elif event.type == 'PullRequestEvent':
            event = 'pr action: {}, title: {}'.format(payload['action'], payload['pull_request']['title'])
        elif event.type == 'CommitCommentEvent':
            event = 'comment: {}'.format(payload['comment']['body'])
        elif event.type == 'CreateEvent':
            event = 'ref_type: {}, ref: {}, pusher_type: {}'.format(payload['ref_type'], payload['ref'], payload['pusher_type'])
        elif event.type == 'DeleteEvent':
            event = 'ref_type: {}, ref: {}, pusher_type: {}'.format(payload['ref_type'], payload['ref'], payload['pusher_type'])
        elif event.type == 'ReleaseEvent':
            event = 'action: {}, release: {}'.format(payload['action'], payload['release']['tag_name'])
        elif event.type == 'IssueEvent':
            event = 'action: {}, issue: {}'.format(payload['action'], payload['issue']['title'])
        elif event.type == 'IssuesEvent':
            event = 'action: {}, issue: {}'.format(payload['action'], payload['issue']['title'])
        else:
            print('WARNING: Unsupported event type: {}'.format(event.type), file=sys.stderr)
        cols.append(event)

        rows.append(cols)

    table = tabulate.tabulate(rows, headers=['time', 'repository', 'type', 'event'])
    print(table)


if __name__ == '__main__':
    main()
